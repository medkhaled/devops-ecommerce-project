name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '.gitignore'
      - 'docs/**'
      - '*.md'

env:
  ACR_NAME: devopsecomacr1234.azurecr.io
  KUBERNETES_NAMESPACE: default

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ACR_NAME }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Set up Kubeconfig
      uses: azure/k8s-set-context@v4
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG }}

    - name: Deploy all services
      run: |
        # Define microservices and their paths
        declare -A services=(
          ["frontend"]="app/frontend"
          ["users-service"]="app/users-service"
          ["products"]="app/products-service"
          ["cart"]="app/cart-service"
        )

        for service in "${!services[@]}"; do
          context=${services[$service]}
          echo "=============================="
          echo "Building and pushing $service image"
          echo "=============================="

          # Build and push Docker image
          docker build -t ${{ env.ACR_NAME }}/$service:${{ github.run_id }} $context
          docker tag ${{ env.ACR_NAME }}/$service:${{ github.run_id }} ${{ env.ACR_NAME }}/$service:latest
          docker push ${{ env.ACR_NAME }}/$service:${{ github.run_id }}
          docker push ${{ env.ACR_NAME }}/$service:latest

          echo "=============================="
          echo "Deploying $service to AKS"
          echo "=============================="

          # Apply Kubernetes manifests
          kubectl apply -f k8s/deployments/$service.yaml -n ${{ env.KUBERNETES_NAMESPACE }}
          kubectl apply -f k8s/services/$service-service.yaml -n ${{ env.KUBERNETES_NAMESPACE }}

          # Update deployment image
          kubectl set image deployment/$service $service=${{ env.ACR_NAME }}/$service:${{ github.run_id }} -n ${{ env.KUBERNETES_NAMESPACE }} || true

          # Wait for rollout
          echo "Waiting for rollout of $service"
          kubectl rollout status deployment/$service -n ${{ env.KUBERNETES_NAMESPACE }} --timeout=300s
        done

    - name: Cluster Health Check
      run: |
        echo "Checking pods in namespace ${{ env.KUBERNETES_NAMESPACE }}"
        kubectl get pods -o wide -n ${{ env.KUBERNETES_NAMESPACE }}
        echo "Checking services in namespace ${{ env.KUBERNETES_NAMESPACE }}"
        kubectl get svc -n ${{ env.KUBERNETES_NAMESPACE }}
        echo "All services deployed successfully!"
