trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - README.md
      - .gitignore
      - docs/**
      - "*.md"

variables:
  acrName: devopsecomacr1234.azurecr.io
  kubernetesNamespace: default
  imageTag: $(Build.BuildId)

parameters:
  - name: services
    type: object
    default:
      - name: frontend
        safeName: frontend
        path: app/frontend
        deployment: frontend
      - name: users-service
        safeName: users_service
        path: app/users-service
        deployment: users
      - name: products-service
        safeName: products_service
        path: app/products-service
        deployment: products
      - name: cart-service
        safeName: cart_service
        path: app/cart-service
        deployment: cart

stages:
# -----------------------------
# Build Stage
# -----------------------------
- stage: Build
  displayName: "Build and Push Docker Images"
  jobs:
  - ${{ each service in parameters.services }}:
    - job: Build_${{ service.safeName }}
      displayName: "Build & Push ${{ service.name }}"
      pool:
        vmImage: "ubuntu-latest"
      steps:
        - checkout: self

        - task: Docker@2
          displayName: "Build ${{ service.name }}"
          inputs:
            containerRegistry: "acr-connection"
            repository: "${{ service.name }}"
            command: "build"
            Dockerfile: "${{ service.path }}/Dockerfile"
            buildContext: "${{ service.path }}"
            tags: |
              $(imageTag)
              latest
              
        - task: Docker@2
          displayName: "Push ${{ service.name }}"
          inputs:
            containerRegistry: "acr-connection"
            repository: "${{ service.name }}"
            command: "push"
            tags: |
              $(imageTag)
              latest

# -----------------------------
# Deploy Stage
# -----------------------------
- stage: Deploy
  displayName: "Deploy to AKS"
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Deploy_All_Services
    displayName: "Deploy All Services"
    pool:
      vmImage: "ubuntu-latest"
    steps:
      - checkout: self

      # Download kubeconfig from DevOps Library Secure Files
      - task: DownloadSecureFile@1
        name: downloadKube
        inputs:
          secureFile: 'aks-kubeconfig'

      - task: Bash@3
        displayName: "Configure kubeconfig"
        inputs:
          targetType: 'inline'
          script: |
            export KUBECONFIG=$(Agent.TempDirectory)/aks-kubeconfig
            echo "##vso[task.setvariable variable=KUBECONFIG]$KUBECONFIG"
            chmod 600 $KUBECONFIG
            kubectl config use-context aks-devops-ecommerce
            echo "Using kubeconfig for context: $(kubectl config current-context)"

      # Deploy all services
      - ${{ each service in parameters.services }}:
        - task: Bash@3
          displayName: "Deploy ${{ service.name }}"
          inputs:
            targetType: 'inline'
            script: |
              kubectl set image deployment/${{ service.deployment }} \
                ${{ service.deployment }}=$(acrName)/${{ service.name }}:$(imageTag) \
                -n $(kubernetesNamespace) --record || true

              kubectl apply -f k8s/${{ service.deployment }}-deployment.yaml -n $(kubernetesNamespace)
              kubectl apply -f k8s/${{ service.deployment }}-service.yaml -n $(kubernetesNamespace)

              echo "Waiting for rollout of ${{ service.deployment }}"
              kubectl rollout status deployment/${{ service.deployment }} -n $(kubernetesNamespace) --timeout=300s

      # Final health check
      - task: Bash@3
        displayName: "Cluster Health Check"
        inputs:
          targetType: 'inline'
          script: |
            echo "Checking pods in namespace $(kubernetesNamespace)"
            kubectl get pods -o wide -n $(kubernetesNamespace)

            echo "Checking services in namespace $(kubernetesNamespace)"
            kubectl get svc -n $(kubernetesNamespace)

            echo "All services deployed successfully!"